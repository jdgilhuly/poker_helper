# Instructions for Building the Poker Odds Trainer App with React Native

This document provides a step-by-step guide and best practices for developing the Poker Odds Trainer app for iOS and Android using React Native and Expo.

## 1. Project Setup (React Native with Expo)

Expo makes setting up and running React Native apps straightforward.

1.  **Prerequisites:**
    *   Install [Node.js](https://nodejs.org/) (LTS version recommended).
    *   Install the Expo CLI: `npm install -g expo-cli`.

2.  **Create a new Expo project:**
    *   Open your terminal and run the following command. We'll use the TypeScript template for better code quality.
        ```bash
        npx create-expo-app PokerOddsTrainer --template blank-ts
        ```
    *   Navigate into your new project directory:
        ```bash
        cd PokerOddsTrainer
        ```

3.  **Version Control:**
    *   A Git repository is initialized automatically. Make an initial commit and commit regularly as you build features.

## 2. Application Architecture (Component-Based with Hooks)

React Native uses a component-based architecture. For this app, we can manage the state within our main `App` component using React Hooks (`useState`, `useCallback`, etc.).

*   **Logic:** The business logic (like calculating odds) will be kept in separate utility functions.
*   **State:** The application's state (the current scenario, user input) will be held in the main component using the `useState` hook.
*   **Components:** The UI is built by creating and composing components from React Native's core library (`View`, `Text`, `TextInput`, `Button`).
*   **Styling:** Styles are defined in JavaScript using the `StyleSheet` API, which provides optimizations and helps keep styling co-located with components.

## 3. Building the Core Components

We'll create a `src` directory to organize our code.

*   `src/types.ts`: To define our `PokerScenario` type.
*   `src/logic.ts`: For our `OddsCalculator` functions.
*   `App.tsx`: The main application component.

### Step 3.1: Create Logic and Types

Create `src/types.ts`:
```typescript
// src/types.ts
export interface PokerScenario {
    id: string;
    potSize: number;
    betToCall: number;
    description: string; // e.g., "You are on the turn with a flush draw."
}
```

Create `src/logic.ts`:
```typescript
// src/logic.ts
// Handles the core calculations
export const OddsCalculator = {
    // Calculates pot odds and returns them as a ratio string (e.g., "3.5:1")
    calculatePotOdds: (potSize: number, betToCall: number): string => {
        if (betToCall <= 0) {
            return "N/A";
        }
        const totalPot = potSize + betToCall;
        const odds = totalPot / betToCall;
        return `${odds.toFixed(1)}:1`;
    },
    // Add functions for implied odds, equity, etc. later
};
```

### Step 3.2: The Main App Component

Replace the contents of `App.tsx` with the following:

```typescript
// App.tsx
import React, { useState, useMemo } from 'react';
import { StyleSheet, Text, View, TextInput, Button, SafeAreaView, Platform, StatusBar } from 'react-native';
import { PokerScenario } from './src/types';
import { OddsCalculator } from './src/logic';

// A hardcoded list of scenarios for now
const SCENARIOS: PokerScenario[] = [
    { id: '1', potSize: 100, betToCall: 20, description: "Heads up on the turn. Pot is $100, opponent bets $20." },
    { id: '2', potSize: 50, betToCall: 25, description: "You are on the flop. Pot is $50, opponent bets $25." },
    // Add more scenarios...
];

export default function App() {
    const [scenarioIndex, setScenarioIndex] = useState(0);
    const [userAnswer, setUserAnswer] = useState('');
    const [feedback, setFeedback] = useState<{ message: string; correct: boolean } | null>(null);

    const currentScenario = SCENARIOS[scenarioIndex];

    const correctAnswer = useMemo(() => {
        return OddsCalculator.calculatePotOdds(currentScenario.potSize, currentScenario.betToCall);
    }, [currentScenario]);

    const checkAnswer = () => {
        if (userAnswer.trim() === correctAnswer) {
            setFeedback({ message: `Correct! The odds were ${correctAnswer}.`, correct: true });
        } else {
            setFeedback({ message: `Not quite. The correct odds are ${correctAnswer}.`, correct: false });
        }
    };

    const nextScenario = () => {
        setScenarioIndex((prevIndex) => (prevIndex + 1) % SCENARIOS.length);
        setUserAnswer('');
        setFeedback(null);
    };

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.container}>
                <Text style={styles.title}>Poker Odds Trainer</Text>

                <View style={styles.scenarioBox}>
                    <Text style={styles.description}>{currentScenario.description}</Text>
                    <Text style={styles.potDetails}>
                        Pot: ${currentScenario.potSize.toFixed(2)} | Bet to Call: ${currentScenario.betToCall.toFixed(2)}
                    </Text>
                </View>

                <View style={styles.inputContainer}>
                    <TextInput
                        style={styles.input}
                        placeholder="Enter pot odds (e.g., 4.0:1)"
                        value={userAnswer}
                        onChangeText={setUserAnswer}
                        keyboardType="numeric"
                    />
                    <Button title="Check" onPress={checkAnswer} />
                </View>

                {feedback && (
                    <View style={styles.feedbackContainer}>
                        <Text style={[styles.feedbackText, { color: feedback.correct ? 'green' : 'red' }]}>
                            {feedback.message}
                        </Text>
                        <Button title="Next Scenario" onPress={nextScenario} />
                    </View>
                )}
            </View>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    safeArea: {
        flex: 1,
        backgroundColor: '#f5f5f5',
        paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
    },
    container: {
        flex: 1,
        padding: 20,
    },
    title: {
        fontSize: 28,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 20,
    },
    scenarioBox: {
        padding: 15,
        backgroundColor: '#fff',
        borderRadius: 8,
        marginBottom: 20,
        alignItems: 'center',
    },
    description: {
        fontSize: 18,
        textAlign: 'center',
        marginBottom: 10,
    },
    potDetails: {
        fontSize: 16,
        color: '#666',
    },
    inputContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 20,
    },
    input: {
        flex: 1,
        borderColor: '#ccc',
        borderWidth: 1,
        borderRadius: 8,
        padding: 10,
        marginRight: 10,
        fontSize: 16,
    },
    feedbackContainer: {
        alignItems: 'center',
    },
    feedbackText: {
        fontSize: 16,
        marginBottom: 10,
    },
});
```

## 4. React Native Development Best Practices

*   **Component Structure:** For larger apps, break down the UI into smaller, reusable components (e.g., `ScenarioCard`, `InputForm`).
*   **State Management:** As the app grows, consider using React's Context API or a dedicated state management library like Zustand or Redux Toolkit to manage global state.
*   **Accessibility:** Use accessibility props like `accessible`, `accessibilityLabel`, and `accessibilityHint` on your components to support screen readers.
*   **Platform-Specific Code:** Use the `Platform` module to apply different styles or logic for iOS and Android when needed (as shown for the `StatusBar` padding).
*   **Testing:** Use Jest and React Native Testing Library for unit and component testing.

    *Example Test (`src/logic.test.ts`):*
    ```typescript
    import { OddsCalculator } from './logic';

    test('calculates pot odds correctly', () => {
      expect(OddsCalculator.calculatePotOdds(100, 25)).toBe('5.0:1');
    });
    ```

## 5. How to Build and Run

1.  **Start the development server:**
    ```bash
    npx expo start
    ```
2.  **Run on a device or simulator:**
    *   **iOS Simulator:** Press `i` in the terminal.
    *   **Android Emulator:** Press `a` in the terminal.
    *   **Physical Device:** Install the "Expo Go" app on your phone and scan the QR code that appears in the terminal.